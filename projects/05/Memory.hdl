// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl
/** 
 * The Memory chip implements the complete address space of the Hack data memory,
 * including RAM, memory mapped screen, and memory mapped keyboard.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 (0x0000 to 0x3FFF) results in accessing the RAM;
 * Access to address 16384 to 24575 (0x4000 to 0x5FFF) results in accessing the Screen memory map;
 * Access to address 24576 (0x6000) results in accessing the Keyboard memory map.
 */ 
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /** 
     * if address[14] is 0, then the maximum address that bits[0..13] can represent is 16383 so we want
     * to put the load input to loadRAM while loadScreen is 0. If address[14] is 1, then the minumun
     * address can represent is 16384. That means we want to put the load input into loadScreen.
     */
    DMux(in=load, sel=address[14], a=loadRAM, b=loadScreen);
    
    // Use either loadRAM or loadScreen to get outputs of RAM16K and Screen
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=RAMout);
    
    // Since Screen functions as a 8K RAM, only use the first 13 bits of address
    Screen(in=in, load=loadScreen, address=address[0..12], out=ScreenOut);
    Keyboard(out=KeyboardOut);
    
    // Select the desired output based on the first 2 bits of address
    Mux4Way16(a=RAMout, b=RAMout, c=ScreenOut, d=KeyboardOut, sel=address[13..14], out=out);
    
}
